// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Bunny {
    float4 pos;
    float2 vel;
    float pad0;
    float pad1;
};

RWStructuredBuffer<Bunny> bunnies;

float3 hash32(float2 p)
{
	float3 p3 = frac(float3(p.xyx) * float3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yxz+33.33);
    return frac((p3.xxy+p3.yzz)*p3.zyx);
}

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float minX = -6.7f;
    float maxX = 6.25f;
    float minY = 4.4f;
    float maxY = -5;

    float gravity = 0.5f / 75;
    Bunny bunny = bunnies[id.x];

    // Generate 3 random numbers from the x and y coords of the bunny
    float3 rands = hash32(bunny.pos.xy);

    bunny.pos.x += bunny.vel.x;
    bunny.pos.y += bunny.vel.y;
    bunny.vel.y -= gravity;

    if (bunny.pos.x > maxX) {
        bunny.vel.x *= -1;
        bunny.pos.x = maxX;
    } else if (bunny.pos.x < minX) {
        bunny.vel.x *= -1;
        bunny.pos.x = minX;
    }

    if (bunny.pos.y < maxY) {
        bunny.vel.y *= -0.85f;
        bunny.pos.y = maxY;
        bunny.pos.w = rands.x * 0.2f - 0.1f; // Passing rotation through w value of position
        if (rands.y > 0.5f) {
            bunny.vel.y += rands.z * 0.1f;
        }
    } else if (bunny.pos.y > minY) {
        bunny.vel.y = 0;
        bunny.pos.y = minY;
    }

    bunnies[id.x] = bunny;
}
